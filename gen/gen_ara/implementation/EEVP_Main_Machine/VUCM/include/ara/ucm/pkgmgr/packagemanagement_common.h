///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, ARA::COM Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : packagemanagement_common.h
/// SERVICE INTERFACE NAME            : PackageManagement
/// GENERATED DATE                    : 2025-02-11 11:52:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// CAUTION!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT                                                   
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_COM_GEN_SERVICE_INTERFACE_PACKAGEMANAGEMENT_COMMON_H
#define PARA_COM_GEN_SERVICE_INTERFACE_PACKAGEMANAGEMENT_COMMON_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/core/future.h"
#include "ara/core/promise.h"
#include "ara/core/result.h"
/// @uptrace{SWS_CM_01001}
#include "ara/com/types.h"
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION OF CPP IMPLEMENTATION DATA TYPE HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @uptrace{SWS_CM_10372}
#include "ara/ucm/impl_type_bytevectortype.h"
#include "ara/ucm/impl_type_gethistoryvectortype.h"
#include "ara/ucm/impl_type_packagemanagerstatustype.h"
#include "ara/ucm/impl_type_swclusterinfovectortype.h"
#include "ara/ucm/impl_type_swdescvectortype.h"
#include "ara/ucm/impl_type_transferidtype.h"
#include "ara/ucm/impl_type_ucmidentifiertype.h"
/// @uptrace{SWS_CM_01005}
namespace ara
{
namespace ucm
{
namespace pkgmgr
{
/// @uptrace{SWS_CM_10370}, {SWS_CM_11266}
enum class UCMErrorDomainErrc : ara::core::ErrorDomain::CodeType
{
    InsufficientMemory = 1,
    IncorrectBlock = 2,
    IncorrectSize = 3,
    InvalidTransferId = 4,
    OperationNotPermitted = 5,
    InsufficientData = 6,
    PackageInconsistent = 7,
    AuthenticationFailed = 8,
    OldVersion = 9,
    ServiceBusy = 12,
    InvalidPackageManifest = 13,
    NotAbleToRevertPackages = 15,
    CancelFailed = 16,
    NotAbleToRollback = 18,
    PreActivationFailed = 19,
    MissingDependencies = 21,
    ProcessSwPackageCancelled = 22,
    ProcessedSoftwarePackageInconsistent = 23,
    IncompatiblePackageVersion = 24,
    BlockInconsistent = 25,
    TransferInterrupted = 26,
    VerificationFailed = 27,
    InsufficientComputationPower = 28,
    IncompatibleDelta = 29,
    IncorrectBlockSize = 30,
    UpdateSessionRejected = 33
};
class UCMErrorDomainException : public ara::core::Exception
{
public:
    UCMErrorDomainException(ara::core::ErrorCode& err) noexcept : ara::core::Exception(err)
    {
    }
};
class UCMErrorDomainErrorDomain final : public ara::core::ErrorDomain
{
public:
    using Errc = UCMErrorDomainErrc;
    constexpr UCMErrorDomainErrorDomain() noexcept : ara::core::ErrorDomain(mDomainId)
    {
    }
    char const* Name() const noexcept override
    {
        return "UCMErrorDomain";
    }
    char const* Message(ara::core::ErrorDomain::CodeType errorCode) const noexcept override
    {
        Errc const code = static_cast<Errc>(errorCode);
        switch (code) {
        	case Errc::InsufficientMemory :
        	    return "insufficient memory";
        	case Errc::IncorrectBlock :
        	    return "incorrect block";
        	case Errc::IncorrectSize :
        	    return "incorrect size";
        	case Errc::InvalidTransferId :
        	    return "invalid transfer id";
        	case Errc::OperationNotPermitted :
        	    return "operation not permitted";
        	case Errc::InsufficientData :
        	    return "insufficient data";
        	case Errc::PackageInconsistent :
        	    return "package inconsistent";
        	case Errc::AuthenticationFailed :
        	    return "authentication failed";
        	case Errc::OldVersion :
        	    return "old version";
        	case Errc::ServiceBusy :
        	    return "service busy";
        	case Errc::InvalidPackageManifest :
        	    return "invalid package manifest";
        	case Errc::NotAbleToRevertPackages :
        	    return "not able to revert packages";
        	case Errc::CancelFailed :
        	    return "cancel failed";
        	case Errc::NotAbleToRollback :
        	    return "not able to rollback";
        	case Errc::PreActivationFailed :
        	    return "pre activation failed";
        	case Errc::MissingDependencies :
        	    return "missing dependencies";
        	case Errc::ProcessSwPackageCancelled :
        	    return "process sw package cancelled";
        	case Errc::ProcessedSoftwarePackageInconsistent :
        	    return "processed software package inconsistent";
        	case Errc::IncompatiblePackageVersion :
        	    return "incompatible package version";
        	case Errc::BlockInconsistent :
        	    return "block inconsistent";
        	case Errc::TransferInterrupted :
        	    return "transfer interrupted";
        	case Errc::VerificationFailed :
        	    return "verification failed";
        	case Errc::InsufficientComputationPower :
        	    return "insufficient computation power";
        	case Errc::IncompatibleDelta :
        	    return "incompatible delta";
        	case Errc::IncorrectBlockSize :
        	    return "incorrect block size";
        	case Errc::UpdateSessionRejected :
        	    return "update session rejected";
            default : 
                return "unknown error";
        }
    }
    void ThrowAsException(ara::core::ErrorCode const& errorCode) const noexcept(false) override
    {
        ara::core::ThrowOrTerminate<ara::core::Exception>(errorCode);
    }
private:
    constexpr static ara::core::ErrorDomain::IdType mDomainId = 0xC000000000000120ULL;
};
namespace internal
{
    constexpr UCMErrorDomainErrorDomain mUCMErrorDomainErrorDomain;
} /// namespace internal
inline constexpr ara::core::ErrorDomain const& GetUCMErrorDomainErrorDomain() noexcept
{
    return internal::mUCMErrorDomainErrorDomain;
}
inline constexpr ara::core::ErrorCode MakeErrorCode(UCMErrorDomainErrc code, ara::core::ErrorDomain::SupportDataType data) noexcept
{
    return ara::core::ErrorCode(static_cast<ara::core::ErrorDomain::CodeType>(code), GetUCMErrorDomainErrorDomain(), data);
}
/// @uptrace{SWS_CM_01010}, {SWS_CM_01012}
class PackageManagement
{
public:
    std::uint32_t serviceContractVersionMajor = 1;
    std::uint32_t serviceContractVersionMinor = 0;
};
} /// namespace pkgmgr
} /// namespace ucm
} /// namespace ara
#endif /// PARA_COM_GEN_SERVICE_INTERFACE_PACKAGEMANAGEMENT_COMMON_H