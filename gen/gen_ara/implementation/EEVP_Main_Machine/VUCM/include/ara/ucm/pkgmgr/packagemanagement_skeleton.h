///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, ARA::COM Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : packagemanagement_skeleton.h
/// SERVICE INTERFACE NAME            : PackageManagement
/// GENERATED DATE                    : 2025-02-11 11:52:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// CAUTION!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT                                                   
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_COM_GEN_SERVICE_INTERFACE_PACKAGEMANAGEMENT_SKELETON_H
#define PARA_COM_GEN_SERVICE_INTERFACE_PACKAGEMANAGEMENT_SKELETON_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @uptrace{SWS_CM_01004}
#include "packagemanagement_common.h"
#include "para/com/skeleton/skeleton_interface.h"
/// @uptrace{SWS_CM_01005}
namespace ara
{
namespace ucm
{
namespace pkgmgr
{
/// @uptrace{SWS_CM_01006}
namespace skeleton
{
class PackageManagementSkeleton;
/// @uptrace{SWS_CM_01009}
namespace events
{
} /// namespace events
/// @uptrace{SWS_CM_01031}
namespace fields
{
/// @uptrace{SWS_CM_00007}
class CurrentStatus
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = ara::ucm::PackageManagerStatusType;
    /// @brief Constructor
    explicit CurrentStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~CurrentStatus() = default;
    /// @brief Delete copy constructor
    CurrentStatus(const CurrentStatus& other) = delete;
    /// @brief Delete copy assignment
    CurrentStatus& operator=(const CurrentStatus& other) = delete;
    /// @brief Move constructor
    CurrentStatus(CurrentStatus&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    CurrentStatus& operator=(CurrentStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"CurrentStatusGetter"};
    const std::string kNotifierCallSign = {"CurrentStatusNotifier"};
};
} /// namespace fields
/// @uptrace{SWS_CM_00002}
class PackageManagementSkeleton
{
public:
    /// @uptrace{SWS_CM_00191}
    struct ActivateOutput
    {
    };
    struct CancelOutput
    {
    };
    struct DeleteTransferOutput
    {
    };
    struct FinishOutput
    {
    };
    struct GetHistoryOutput
    {
        ara::ucm::GetHistoryVectorType history;
    };
    struct GetIdOutput
    {
        ara::ucm::UCMIdentifierType id;
    };
    struct GetSwClusterChangeInfoOutput
    {
        ara::ucm::SwClusterInfoVectorType SwInfo;
    };
    struct GetSwClusterDescriptionOutput
    {
        ara::ucm::SwDescVectorType SwCluster;
    };
    struct GetSwClusterInfoOutput
    {
        ara::ucm::SwClusterInfoVectorType SwInfo;
    };
    struct GetSwPackagesOutput
    {
        ara::ucm::SwClusterInfoVectorType Packages;
    };
    struct GetSwProcessProgressOutput
    {
        std::uint8_t progress;
    };
    struct ProcessSwPackageOutput
    {
    };
    struct RevertProcessedSwPackagesOutput
    {
    };
    struct RollbackOutput
    {
    };
    struct TransferDataOutput
    {
    };
    struct TransferExitOutput
    {
    };
    struct TransferStartOutput
    {
        ara::ucm::TransferIdType id;
        std::uint32_t BlockSize;
    };
    /// @brief Constructor
    /// @uptrace{SWS_CM_00002, SWS_CM_00152}
    PackageManagementSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        : mInterface(std::make_unique<para::com::SkeletonInterface>(instanceSpec, mode))
        , CurrentStatus(mInterface.get())
    {
        mInterface->SetMethodCallHandler(kActivateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleActivate(data, token);
        });
        mInterface->SetMethodCallHandler(kCancelCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleCancel(data, token);
        });
        mInterface->SetMethodCallHandler(kDeleteTransferCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleDeleteTransfer(data, token);
        });
        mInterface->SetMethodCallHandler(kFinishCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleFinish(data, token);
        });
        mInterface->SetMethodCallHandler(kGetHistoryCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetHistory(data, token);
        });
        mInterface->SetMethodCallHandler(kGetIdCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetId(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterChangeInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterChangeInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterDescriptionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterDescription(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwPackagesCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwPackages(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwProcessProgressCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwProcessProgress(data, token);
        });
        mInterface->SetMethodCallHandler(kProcessSwPackageCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleProcessSwPackage(data, token);
        });
        mInterface->SetMethodCallHandler(kRevertProcessedSwPackagesCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRevertProcessedSwPackages(data, token);
        });
        mInterface->SetMethodCallHandler(kRollbackCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRollback(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferDataCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferData(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferExitCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferExit(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferStartCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferStart(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
    }
    /// @brief Destructor
    virtual ~PackageManagementSkeleton() = default;
    /// @brief Delete copy constructor
    /// @uptrace{SWS_CM_00134}
    PackageManagementSkeleton(const PackageManagementSkeleton& other) = delete;
    /// @brief Delete copy assignment
    /// @uptrace{SWS_CM_00134}
    PackageManagementSkeleton& operator=(const PackageManagementSkeleton& other) = delete;
    /// @brief Move constructor
    /// @uptrace{SWS_CM_00135}
    PackageManagementSkeleton(PackageManagementSkeleton&& other) noexcept
        : mInterface(std::move(other.mInterface))
        , CurrentStatus(std::move(other.CurrentStatus))
    {
        mInterface->SetMethodCallHandler(kActivateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleActivate(data, token);
        });
        mInterface->SetMethodCallHandler(kCancelCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleCancel(data, token);
        });
        mInterface->SetMethodCallHandler(kDeleteTransferCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleDeleteTransfer(data, token);
        });
        mInterface->SetMethodCallHandler(kFinishCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleFinish(data, token);
        });
        mInterface->SetMethodCallHandler(kGetHistoryCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetHistory(data, token);
        });
        mInterface->SetMethodCallHandler(kGetIdCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetId(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterChangeInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterChangeInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterDescriptionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterDescription(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwPackagesCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwPackages(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwProcessProgressCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwProcessProgress(data, token);
        });
        mInterface->SetMethodCallHandler(kProcessSwPackageCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleProcessSwPackage(data, token);
        });
        mInterface->SetMethodCallHandler(kRevertProcessedSwPackagesCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRevertProcessedSwPackages(data, token);
        });
        mInterface->SetMethodCallHandler(kRollbackCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRollback(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferDataCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferData(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferExitCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferExit(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferStartCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferStart(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
    }
    /// @brief Move assignment
    /// @uptrace{SWS_CM_00135}
    PackageManagementSkeleton& operator=(PackageManagementSkeleton&& other) noexcept
    {
        mInterface = std::move(other.mInterface);
        CurrentStatus = std::move(other.CurrentStatus);
        mInterface->SetMethodCallHandler(kActivateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleActivate(data, token);
        });
        mInterface->SetMethodCallHandler(kCancelCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleCancel(data, token);
        });
        mInterface->SetMethodCallHandler(kDeleteTransferCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleDeleteTransfer(data, token);
        });
        mInterface->SetMethodCallHandler(kFinishCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleFinish(data, token);
        });
        mInterface->SetMethodCallHandler(kGetHistoryCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetHistory(data, token);
        });
        mInterface->SetMethodCallHandler(kGetIdCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetId(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterChangeInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterChangeInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterDescriptionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterDescription(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwClusterInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwClusterInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwPackagesCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwPackages(data, token);
        });
        mInterface->SetMethodCallHandler(kGetSwProcessProgressCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleGetSwProcessProgress(data, token);
        });
        mInterface->SetMethodCallHandler(kProcessSwPackageCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleProcessSwPackage(data, token);
        });
        mInterface->SetMethodCallHandler(kRevertProcessedSwPackagesCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRevertProcessedSwPackages(data, token);
        });
        mInterface->SetMethodCallHandler(kRollbackCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRollback(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferDataCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferData(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferExitCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferExit(data, token);
        });
        mInterface->SetMethodCallHandler(kTransferStartCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleTransferStart(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
        return *this;
    }
    /// @brief Send "OfferService" message to Communication Management
    /// @uptrace{SWS_CM_00101}
    ara::core::Result<void> OfferService()
    {
        return mInterface->OfferService();
    }
    /// @brief Send "StopOfferService" message to Communication Management
    /// @uptrace{SWS_CM_00111}
    void StopOfferService()
    {
        mInterface->StopOfferService();
    }
    /// @brief Allows the implementation providing the service method to trigger the execution of the next service consumer method call at a specific point of time
    ///        if the processing mode is set to kPoll.
    /// @note This function requires that ara::com::MethodCallProcessingMode is configured as kPoll by constructor
    /// @uptrace{SWS_CM_00199}
    ara::core::Future<bool> ProcessNextMethodCall()
    {
        ara::core::Promise<bool> promise{};
        auto ret = mInterface->ProcessNextMethodCall();
        if (ret.HasValue())
        {
            promise.set_value(ret.Value());
        }
        else
        {
            promise.SetError(ret.Error());
        }
        return promise.get_future();
    }
    /// @brief In case the call to E2E_check indicated a failed E2E check of the request message, the server application can get notified via an E2E error handler.
    /// @uptrace{SWS_CM_10470}
    virtual void E2EErrorHandler(const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter)
    {
    }
    
private:
    std::unique_ptr<para::com::SkeletonInterface> mInterface;
    
public:
    /// @brief Field, CurrentStatus
    fields::CurrentStatus CurrentStatus;
    /// @brief Method, Activate
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<ActivateOutput> Activate() = 0;
    /// @brief Method, Cancel
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<CancelOutput> Cancel(const ara::ucm::TransferIdType& id) = 0;
    /// @brief Method, DeleteTransfer
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<DeleteTransferOutput> DeleteTransfer(const ara::ucm::TransferIdType& id) = 0;
    /// @brief Method, Finish
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<FinishOutput> Finish() = 0;
    /// @brief Method, GetHistory
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<GetHistoryOutput> GetHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT) = 0;
    /// @brief Method, GetId
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<GetIdOutput> GetId() = 0;
    /// @brief Method, GetSwClusterChangeInfo
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<GetSwClusterChangeInfoOutput> GetSwClusterChangeInfo() = 0;
    /// @brief Method, GetSwClusterDescription
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<GetSwClusterDescriptionOutput> GetSwClusterDescription() = 0;
    /// @brief Method, GetSwClusterInfo
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<GetSwClusterInfoOutput> GetSwClusterInfo() = 0;
    /// @brief Method, GetSwPackages
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<GetSwPackagesOutput> GetSwPackages() = 0;
    /// @brief Method, GetSwProcessProgress
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<GetSwProcessProgressOutput> GetSwProcessProgress(const ara::ucm::TransferIdType& id) = 0;
    /// @brief Method, ProcessSwPackage
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<ProcessSwPackageOutput> ProcessSwPackage(const ara::ucm::TransferIdType& id) = 0;
    /// @brief Method, RevertProcessedSwPackages
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RevertProcessedSwPackagesOutput> RevertProcessedSwPackages() = 0;
    /// @brief Method, Rollback
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RollbackOutput> Rollback() = 0;
    /// @brief Method, TransferData
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<TransferDataOutput> TransferData(const ara::ucm::TransferIdType& id, const ara::ucm::ByteVectorType& data, const std::uint64_t& blockCounter) = 0;
    /// @brief Method, TransferExit
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<TransferExitOutput> TransferExit(const ara::ucm::TransferIdType& id) = 0;
    /// @brief Method, TransferStart
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<TransferStartOutput> TransferStart(const std::uint64_t& size) = 0;
    
private:
    void HandleActivate(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = Activate();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kActivateCallSign, retResult, retData, token);
    }
    void HandleCancel(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        ara::ucm::TransferIdType _id_;
        deserializer.read(_id_);
        auto future = Cancel(_id_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kCancelCallSign, retResult, retData, token);
    }
    void HandleDeleteTransfer(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        ara::ucm::TransferIdType _id_;
        deserializer.read(_id_);
        auto future = DeleteTransfer(_id_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kDeleteTransferCallSign, retResult, retData, token);
    }
    void HandleFinish(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = Finish();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kFinishCallSign, retResult, retData, token);
    }
    void HandleGetHistory(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint64_t _timestampGE_;
        std::uint64_t _timestampLT_;
        deserializer.read(_timestampGE_);
        deserializer.read(_timestampLT_);
        auto future = GetHistory(_timestampGE_, _timestampLT_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            GetHistoryOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.history);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetHistoryCallSign, retResult, retData, token);
    }
    void HandleGetId(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = GetId();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            GetIdOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.id);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetIdCallSign, retResult, retData, token);
    }
    void HandleGetSwClusterChangeInfo(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = GetSwClusterChangeInfo();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            GetSwClusterChangeInfoOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.SwInfo);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetSwClusterChangeInfoCallSign, retResult, retData, token);
    }
    void HandleGetSwClusterDescription(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = GetSwClusterDescription();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            GetSwClusterDescriptionOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.SwCluster);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetSwClusterDescriptionCallSign, retResult, retData, token);
    }
    void HandleGetSwClusterInfo(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = GetSwClusterInfo();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            GetSwClusterInfoOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.SwInfo);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetSwClusterInfoCallSign, retResult, retData, token);
    }
    void HandleGetSwPackages(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = GetSwPackages();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            GetSwPackagesOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.Packages);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetSwPackagesCallSign, retResult, retData, token);
    }
    void HandleGetSwProcessProgress(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        ara::ucm::TransferIdType _id_;
        deserializer.read(_id_);
        auto future = GetSwProcessProgress(_id_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            GetSwProcessProgressOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.progress);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetSwProcessProgressCallSign, retResult, retData, token);
    }
    void HandleProcessSwPackage(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        ara::ucm::TransferIdType _id_;
        deserializer.read(_id_);
        auto future = ProcessSwPackage(_id_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kProcessSwPackageCallSign, retResult, retData, token);
    }
    void HandleRevertProcessedSwPackages(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = RevertProcessedSwPackages();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRevertProcessedSwPackagesCallSign, retResult, retData, token);
    }
    void HandleRollback(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = Rollback();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRollbackCallSign, retResult, retData, token);
    }
    void HandleTransferData(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        ara::ucm::TransferIdType _id_;
        ara::ucm::ByteVectorType _data_;
        std::uint64_t _blockCounter_;
        deserializer.read(_id_);
        deserializer.read(_data_);
        deserializer.read(_blockCounter_);
        auto future = TransferData(_id_, _data_, _blockCounter_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kTransferDataCallSign, retResult, retData, token);
    }
    void HandleTransferExit(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        ara::ucm::TransferIdType _id_;
        deserializer.read(_id_);
        auto future = TransferExit(_id_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kTransferExitCallSign, retResult, retData, token);
    }
    void HandleTransferStart(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint64_t _size_;
        deserializer.read(_size_);
        auto future = TransferStart(_size_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            TransferStartOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.id);
            serializer.write(output.BlockSize);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kTransferStartCallSign, retResult, retData, token);
    }
    const std::string kActivateCallSign{"Activate"};
    const std::string kCancelCallSign{"Cancel"};
    const std::string kDeleteTransferCallSign{"DeleteTransfer"};
    const std::string kFinishCallSign{"Finish"};
    const std::string kGetHistoryCallSign{"GetHistory"};
    const std::string kGetIdCallSign{"GetId"};
    const std::string kGetSwClusterChangeInfoCallSign{"GetSwClusterChangeInfo"};
    const std::string kGetSwClusterDescriptionCallSign{"GetSwClusterDescription"};
    const std::string kGetSwClusterInfoCallSign{"GetSwClusterInfo"};
    const std::string kGetSwPackagesCallSign{"GetSwPackages"};
    const std::string kGetSwProcessProgressCallSign{"GetSwProcessProgress"};
    const std::string kProcessSwPackageCallSign{"ProcessSwPackage"};
    const std::string kRevertProcessedSwPackagesCallSign{"RevertProcessedSwPackages"};
    const std::string kRollbackCallSign{"Rollback"};
    const std::string kTransferDataCallSign{"TransferData"};
    const std::string kTransferExitCallSign{"TransferExit"};
    const std::string kTransferStartCallSign{"TransferStart"};
};
} /// namespace skeleton
} /// namespace pkgmgr
} /// namespace ucm
} /// namespace ara
#endif /// PARA_COM_GEN_SERVICE_INTERFACE_PACKAGEMANAGEMENT_SKELETON_H