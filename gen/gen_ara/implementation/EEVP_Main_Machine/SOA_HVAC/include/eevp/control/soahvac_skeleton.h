///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, ARA::COM Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soahvac_skeleton.h
/// SERVICE INTERFACE NAME            : SoaHvac
/// GENERATED DATE                    : 2025-03-24 16:52:21
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// CAUTION!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT                                                   
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_COM_GEN_SERVICE_INTERFACE_SOAHVAC_SKELETON_H
#define PARA_COM_GEN_SERVICE_INTERFACE_SOAHVAC_SKELETON_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @uptrace{SWS_CM_01004}
#include "soahvac_common.h"
#include "para/com/skeleton/skeleton_interface.h"
/// @uptrace{SWS_CM_01005}
namespace eevp
{
namespace control
{
/// @uptrace{SWS_CM_01006}
namespace skeleton
{
class SoaHvacSkeleton;
/// @uptrace{SWS_CM_01009}
namespace events
{
} /// namespace events
/// @uptrace{SWS_CM_01031}
namespace fields
{
/// @uptrace{SWS_CM_00007}
class SoaHvacSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit SoaHvacSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~SoaHvacSwVersion() = default;
    /// @brief Delete copy constructor
    SoaHvacSwVersion(const SoaHvacSwVersion& other) = delete;
    /// @brief Delete copy assignment
    SoaHvacSwVersion& operator=(const SoaHvacSwVersion& other) = delete;
    /// @brief Move constructor
    SoaHvacSwVersion(SoaHvacSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    SoaHvacSwVersion& operator=(SoaHvacSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"SoaHvacSwVersionGetter"};
    const std::string kNotifierCallSign = {"SoaHvacSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaHvacDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaHvacDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaHvacDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaHvacDeviceNormal(const soaHvacDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaHvacDeviceNormal& operator=(const soaHvacDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaHvacDeviceNormal(soaHvacDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaHvacDeviceNormal& operator=(soaHvacDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaHvacDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaHvacDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaHvacSetting
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaHvacStatus;
    /// @brief Constructor
    explicit soaHvacSetting(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaHvacSetting() = default;
    /// @brief Delete copy constructor
    soaHvacSetting(const soaHvacSetting& other) = delete;
    /// @brief Delete copy assignment
    soaHvacSetting& operator=(const soaHvacSetting& other) = delete;
    /// @brief Move constructor
    soaHvacSetting(soaHvacSetting&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaHvacSetting& operator=(soaHvacSetting&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaHvacSettingGetter"};
    const std::string kNotifierCallSign = {"soaHvacSettingNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaHvacStatus
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaHvacStatus;
    /// @brief Constructor
    explicit soaHvacStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaHvacStatus() = default;
    /// @brief Delete copy constructor
    soaHvacStatus(const soaHvacStatus& other) = delete;
    /// @brief Delete copy assignment
    soaHvacStatus& operator=(const soaHvacStatus& other) = delete;
    /// @brief Move constructor
    soaHvacStatus(soaHvacStatus&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaHvacStatus& operator=(soaHvacStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaHvacStatusGetter"};
    const std::string kNotifierCallSign = {"soaHvacStatusNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaHvacTemps
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaHvacTemps;
    /// @brief Constructor
    explicit soaHvacTemps(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaHvacTemps() = default;
    /// @brief Delete copy constructor
    soaHvacTemps(const soaHvacTemps& other) = delete;
    /// @brief Delete copy assignment
    soaHvacTemps& operator=(const soaHvacTemps& other) = delete;
    /// @brief Move constructor
    soaHvacTemps(soaHvacTemps&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaHvacTemps& operator=(soaHvacTemps&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaHvacTempsGetter"};
    const std::string kNotifierCallSign = {"soaHvacTempsNotifier"};
};
} /// namespace fields
/// @uptrace{SWS_CM_00002}
class SoaHvacSkeleton
{
public:
    /// @uptrace{SWS_CM_00191}
    /// @brief Constructor
    /// @uptrace{SWS_CM_00002, SWS_CM_00152}
    SoaHvacSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        : mInterface(std::make_unique<para::com::SkeletonInterface>(instanceSpec, mode))
        , SoaHvacSwVersion(mInterface.get())
        , soaHvacDeviceNormal(mInterface.get())
        , soaHvacSetting(mInterface.get())
        , soaHvacStatus(mInterface.get())
        , soaHvacTemps(mInterface.get())
    {
        mInterface->SetMethodCallHandler(kSetAcOnOffCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAcOnOff(data);
        });
        mInterface->SetMethodCallHandler(kSetAirSourceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAirSource(data);
        });
        mInterface->SetMethodCallHandler(kSetAutoTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAutoTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetBackwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBackwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingDirectionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingDirection(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingForceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingForce(data);
        });
        mInterface->SetMethodCallHandler(kSetDriverTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetDriverTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetForwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetForwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetPassengerTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetPassengerTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetHvacPowerCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetHvacPower(data);
        });
        mInterface->SetMethodCallHandler(kSetSyncCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetSync(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
    }
    /// @brief Destructor
    virtual ~SoaHvacSkeleton() = default;
    /// @brief Delete copy constructor
    /// @uptrace{SWS_CM_00134}
    SoaHvacSkeleton(const SoaHvacSkeleton& other) = delete;
    /// @brief Delete copy assignment
    /// @uptrace{SWS_CM_00134}
    SoaHvacSkeleton& operator=(const SoaHvacSkeleton& other) = delete;
    /// @brief Move constructor
    /// @uptrace{SWS_CM_00135}
    SoaHvacSkeleton(SoaHvacSkeleton&& other) noexcept
        : mInterface(std::move(other.mInterface))
        , SoaHvacSwVersion(std::move(other.SoaHvacSwVersion))
        , soaHvacDeviceNormal(std::move(other.soaHvacDeviceNormal))
        , soaHvacSetting(std::move(other.soaHvacSetting))
        , soaHvacStatus(std::move(other.soaHvacStatus))
        , soaHvacTemps(std::move(other.soaHvacTemps))
    {
        mInterface->SetMethodCallHandler(kSetAcOnOffCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAcOnOff(data);
        });
        mInterface->SetMethodCallHandler(kSetAirSourceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAirSource(data);
        });
        mInterface->SetMethodCallHandler(kSetAutoTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAutoTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetBackwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBackwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingDirectionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingDirection(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingForceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingForce(data);
        });
        mInterface->SetMethodCallHandler(kSetDriverTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetDriverTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetForwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetForwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetPassengerTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetPassengerTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetHvacPowerCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetHvacPower(data);
        });
        mInterface->SetMethodCallHandler(kSetSyncCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetSync(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
    }
    /// @brief Move assignment
    /// @uptrace{SWS_CM_00135}
    SoaHvacSkeleton& operator=(SoaHvacSkeleton&& other) noexcept
    {
        mInterface = std::move(other.mInterface);
        SoaHvacSwVersion = std::move(other.SoaHvacSwVersion);
        soaHvacDeviceNormal = std::move(other.soaHvacDeviceNormal);
        soaHvacSetting = std::move(other.soaHvacSetting);
        soaHvacStatus = std::move(other.soaHvacStatus);
        soaHvacTemps = std::move(other.soaHvacTemps);
        mInterface->SetMethodCallHandler(kSetAcOnOffCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAcOnOff(data);
        });
        mInterface->SetMethodCallHandler(kSetAirSourceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAirSource(data);
        });
        mInterface->SetMethodCallHandler(kSetAutoTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAutoTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetBackwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBackwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingDirectionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingDirection(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingForceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingForce(data);
        });
        mInterface->SetMethodCallHandler(kSetDriverTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetDriverTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetForwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetForwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetPassengerTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetPassengerTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetHvacPowerCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetHvacPower(data);
        });
        mInterface->SetMethodCallHandler(kSetSyncCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetSync(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
        return *this;
    }
    /// @brief Send "OfferService" message to Communication Management
    /// @uptrace{SWS_CM_00101}
    ara::core::Result<void> OfferService()
    {
        return mInterface->OfferService();
    }
    /// @brief Send "StopOfferService" message to Communication Management
    /// @uptrace{SWS_CM_00111}
    void StopOfferService()
    {
        mInterface->StopOfferService();
    }
    /// @brief Allows the implementation providing the service method to trigger the execution of the next service consumer method call at a specific point of time
    ///        if the processing mode is set to kPoll.
    /// @note This function requires that ara::com::MethodCallProcessingMode is configured as kPoll by constructor
    /// @uptrace{SWS_CM_00199}
    ara::core::Future<bool> ProcessNextMethodCall()
    {
        ara::core::Promise<bool> promise{};
        auto ret = mInterface->ProcessNextMethodCall();
        if (ret.HasValue())
        {
            promise.set_value(ret.Value());
        }
        else
        {
            promise.SetError(ret.Error());
        }
        return promise.get_future();
    }
    /// @brief In case the call to E2E_check indicated a failed E2E check of the request message, the server application can get notified via an E2E error handler.
    /// @uptrace{SWS_CM_10470}
    virtual void E2EErrorHandler(const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter)
    {
    }
    
private:
    std::unique_ptr<para::com::SkeletonInterface> mInterface;
    
public:
    /// @brief Field, soaHvacDeviceNormal
    fields::SoaHvacSwVersion SoaHvacSwVersion;
    /// @brief Field, soaHvacDeviceNormal
    fields::soaHvacDeviceNormal soaHvacDeviceNormal;
    /// @brief Field, soaHvacSetting
    fields::soaHvacSetting soaHvacSetting;
    /// @brief Field, soaHvacStatus
    fields::soaHvacStatus soaHvacStatus;
    /// @brief Field, soaHvacTemps
    fields::soaHvacTemps soaHvacTemps;
    /// @brief Method, SetAcOnOff
    /// @uptrace{SWS_CM_90434}
    virtual void SetAcOnOff(const bool& on) = 0;
    /// @brief Method, SetAirSource
    /// @uptrace{SWS_CM_90434}
    virtual void SetAirSource(const eevp::control::SoaHvacAirSource& src) = 0;
    /// @brief Method, SetAutoTemp
    /// @uptrace{SWS_CM_90434}
    virtual void SetAutoTemp(const bool& on) = 0;
    /// @brief Method, SetBackwardDefrostOn
    /// @uptrace{SWS_CM_90434}
    virtual void SetBackwardDefrostOn(const bool& on) = 0;
    /// @brief Method, SetBlowingDirection
    /// @uptrace{SWS_CM_90434}
    virtual void SetBlowingDirection(const eevp::control::SoaHvacBlowDir& dir) = 0;
    /// @brief Method, SetBlowingForce
    /// @uptrace{SWS_CM_90434}
    virtual void SetBlowingForce(const std::uint8_t& force) = 0;
    /// @brief Method, SetDriverTemp
    /// @uptrace{SWS_CM_90434}
    virtual void SetDriverTemp(const std::int8_t& temperature) = 0;
    /// @brief Method, SetForwardDefrostOn
    /// @uptrace{SWS_CM_90434}
    virtual void SetForwardDefrostOn(const bool& on) = 0;
    /// @brief Method, SetPassengerTemp
    /// @uptrace{SWS_CM_90434}
    virtual void SetPassengerTemp(const std::int8_t& temperature) = 0;
    /// @brief Method, SetHvacPower
    /// @uptrace{SWS_CM_90434}
    virtual void SetHvacPower(const bool& on) = 0;
    /// @brief Method, SetSync
    /// @uptrace{SWS_CM_90434}
    virtual void SetSync(const bool& on) = 0;
    
private:
    void HandleSetAcOnOff(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _on_;
        deserializer.read(_on_);
        SetAcOnOff(_on_);
    }
    void HandleSetAirSource(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaHvacAirSource _src_;
        deserializer.read(_src_);
        SetAirSource(_src_);
    }
    void HandleSetAutoTemp(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _on_;
        deserializer.read(_on_);
        SetAutoTemp(_on_);
    }
    void HandleSetBackwardDefrostOn(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _on_;
        deserializer.read(_on_);
        SetBackwardDefrostOn(_on_);
    }
    void HandleSetBlowingDirection(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaHvacBlowDir _dir_;
        deserializer.read(_dir_);
        SetBlowingDirection(_dir_);
    }
    void HandleSetBlowingForce(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _force_;
        deserializer.read(_force_);
        SetBlowingForce(_force_);
    }
    void HandleSetDriverTemp(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::int8_t _temperature_;
        deserializer.read(_temperature_);
        SetDriverTemp(_temperature_);
    }
    void HandleSetForwardDefrostOn(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _on_;
        deserializer.read(_on_);
        SetForwardDefrostOn(_on_);
    }
    void HandleSetPassengerTemp(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::int8_t _temperature_;
        deserializer.read(_temperature_);
        SetPassengerTemp(_temperature_);
    }
    void HandleSetHvacPower(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _on_;
        deserializer.read(_on_);
        SetHvacPower(_on_);
    }
    void HandleSetSync(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _on_;
        deserializer.read(_on_);
        SetSync(_on_);
    }
    const std::string kSetAcOnOffCallSign{"SetAcOnOff"};
    const std::string kSetAirSourceCallSign{"SetAirSource"};
    const std::string kSetAutoTempCallSign{"SetAutoTemp"};
    const std::string kSetBackwardDefrostOnCallSign{"SetBackwardDefrostOn"};
    const std::string kSetBlowingDirectionCallSign{"SetBlowingDirection"};
    const std::string kSetBlowingForceCallSign{"SetBlowingForce"};
    const std::string kSetDriverTempCallSign{"SetDriverTemp"};
    const std::string kSetForwardDefrostOnCallSign{"SetForwardDefrostOn"};
    const std::string kSetPassengerTempCallSign{"SetPassengerTemp"};
    const std::string kSetHvacPowerCallSign{"SetHvacPower"};
    const std::string kSetSyncCallSign{"SetSync"};
};
} /// namespace skeleton
} /// namespace control
} /// namespace eevp
#endif /// PARA_COM_GEN_SERVICE_INTERFACE_SOAHVAC_SKELETON_H