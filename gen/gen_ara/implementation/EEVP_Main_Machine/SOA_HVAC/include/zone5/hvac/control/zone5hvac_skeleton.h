///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, ARA::COM Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : zone5hvac_skeleton.h
/// SERVICE INTERFACE NAME            : Zone5Hvac
/// GENERATED DATE                    : 2025-04-16 17:30:36
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// CAUTION!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT                                                   
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_COM_GEN_SERVICE_INTERFACE_ZONE5HVAC_SKELETON_H
#define PARA_COM_GEN_SERVICE_INTERFACE_ZONE5HVAC_SKELETON_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @uptrace{SWS_CM_01004}
#include "zone5hvac_common.h"
#include "para/com/skeleton/skeleton_interface.h"
/// @uptrace{SWS_CM_01005}
namespace zone5
{
namespace hvac
{
namespace control
{
/// @uptrace{SWS_CM_01006}
namespace skeleton
{
class Zone5HvacSkeleton;
/// @uptrace{SWS_CM_01009}
namespace events
{
} /// namespace events
/// @uptrace{SWS_CM_01031}
namespace fields
{
/// @uptrace{SWS_CM_00007}
class zone5HvacDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit zone5HvacDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~zone5HvacDeviceNormal() = default;
    /// @brief Delete copy constructor
    zone5HvacDeviceNormal(const zone5HvacDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    zone5HvacDeviceNormal& operator=(const zone5HvacDeviceNormal& other) = delete;
    /// @brief Move constructor
    zone5HvacDeviceNormal(zone5HvacDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    zone5HvacDeviceNormal& operator=(zone5HvacDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"zone5HvacDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"zone5HvacDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class zone5HvacSetting
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = zone5::hvac::control::EcuZ5HvacStatus;
    /// @brief Constructor
    explicit zone5HvacSetting(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~zone5HvacSetting() = default;
    /// @brief Delete copy constructor
    zone5HvacSetting(const zone5HvacSetting& other) = delete;
    /// @brief Delete copy assignment
    zone5HvacSetting& operator=(const zone5HvacSetting& other) = delete;
    /// @brief Move constructor
    zone5HvacSetting(zone5HvacSetting&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    zone5HvacSetting& operator=(zone5HvacSetting&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"zone5HvacSettingGetter"};
    const std::string kNotifierCallSign = {"zone5HvacSettingNotifier"};
};
/// @uptrace{SWS_CM_00007}
class zone5HvacStatus
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = zone5::hvac::control::EcuZ5HvacStatus;
    /// @brief Constructor
    explicit zone5HvacStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~zone5HvacStatus() = default;
    /// @brief Delete copy constructor
    zone5HvacStatus(const zone5HvacStatus& other) = delete;
    /// @brief Delete copy assignment
    zone5HvacStatus& operator=(const zone5HvacStatus& other) = delete;
    /// @brief Move constructor
    zone5HvacStatus(zone5HvacStatus&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    zone5HvacStatus& operator=(zone5HvacStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"zone5HvacStatusGetter"};
    const std::string kNotifierCallSign = {"zone5HvacStatusNotifier"};
};
/// @uptrace{SWS_CM_00007}
class zone5HvacTemps
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = zone5::hvac::control::EcuZ5HvacTemps;
    /// @brief Constructor
    explicit zone5HvacTemps(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~zone5HvacTemps() = default;
    /// @brief Delete copy constructor
    zone5HvacTemps(const zone5HvacTemps& other) = delete;
    /// @brief Delete copy assignment
    zone5HvacTemps& operator=(const zone5HvacTemps& other) = delete;
    /// @brief Move constructor
    zone5HvacTemps(zone5HvacTemps&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    zone5HvacTemps& operator=(zone5HvacTemps&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"zone5HvacTempsGetter"};
    const std::string kNotifierCallSign = {"zone5HvacTempsNotifier"};
};
} /// namespace fields
/// @uptrace{SWS_CM_00002}
class Zone5HvacSkeleton
{
public:
    /// @uptrace{SWS_CM_00191}
    /// @brief Constructor
    /// @uptrace{SWS_CM_00002, SWS_CM_00152}
    Zone5HvacSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        : mInterface(std::make_unique<para::com::SkeletonInterface>(instanceSpec, mode))
        , zone5HvacDeviceNormal(mInterface.get())
        , zone5HvacSetting(mInterface.get())
        , zone5HvacStatus(mInterface.get())
        , zone5HvacTemps(mInterface.get())
    {
        mInterface->SetMethodCallHandler(kSetAcOnOffCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAcOnOff(data);
        });
        mInterface->SetMethodCallHandler(kSetAirSourceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAirSource(data);
        });
        mInterface->SetMethodCallHandler(kSetAutoTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAutoTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetBackwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBackwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingDirectionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingDirection(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingForceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingForce(data);
        });
        mInterface->SetMethodCallHandler(kSetDriverTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetDriverTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetForwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetForwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetPassengerTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetPassengerTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetHvacPowerCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetHvacPower(data);
        });
        mInterface->SetMethodCallHandler(kSetSyncCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetSync(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
    }
    /// @brief Destructor
    virtual ~Zone5HvacSkeleton() = default;
    /// @brief Delete copy constructor
    /// @uptrace{SWS_CM_00134}
    Zone5HvacSkeleton(const Zone5HvacSkeleton& other) = delete;
    /// @brief Delete copy assignment
    /// @uptrace{SWS_CM_00134}
    Zone5HvacSkeleton& operator=(const Zone5HvacSkeleton& other) = delete;
    /// @brief Move constructor
    /// @uptrace{SWS_CM_00135}
    Zone5HvacSkeleton(Zone5HvacSkeleton&& other) noexcept
        : mInterface(std::move(other.mInterface))
        , zone5HvacDeviceNormal(std::move(other.zone5HvacDeviceNormal))
        , zone5HvacSetting(std::move(other.zone5HvacSetting))
        , zone5HvacStatus(std::move(other.zone5HvacStatus))
        , zone5HvacTemps(std::move(other.zone5HvacTemps))
    {
        mInterface->SetMethodCallHandler(kSetAcOnOffCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAcOnOff(data);
        });
        mInterface->SetMethodCallHandler(kSetAirSourceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAirSource(data);
        });
        mInterface->SetMethodCallHandler(kSetAutoTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAutoTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetBackwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBackwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingDirectionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingDirection(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingForceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingForce(data);
        });
        mInterface->SetMethodCallHandler(kSetDriverTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetDriverTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetForwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetForwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetPassengerTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetPassengerTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetHvacPowerCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetHvacPower(data);
        });
        mInterface->SetMethodCallHandler(kSetSyncCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetSync(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
    }
    /// @brief Move assignment
    /// @uptrace{SWS_CM_00135}
    Zone5HvacSkeleton& operator=(Zone5HvacSkeleton&& other) noexcept
    {
        mInterface = std::move(other.mInterface);
        zone5HvacDeviceNormal = std::move(other.zone5HvacDeviceNormal);
        zone5HvacSetting = std::move(other.zone5HvacSetting);
        zone5HvacStatus = std::move(other.zone5HvacStatus);
        zone5HvacTemps = std::move(other.zone5HvacTemps);
        mInterface->SetMethodCallHandler(kSetAcOnOffCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAcOnOff(data);
        });
        mInterface->SetMethodCallHandler(kSetAirSourceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAirSource(data);
        });
        mInterface->SetMethodCallHandler(kSetAutoTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetAutoTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetBackwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBackwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingDirectionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingDirection(data);
        });
        mInterface->SetMethodCallHandler(kSetBlowingForceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetBlowingForce(data);
        });
        mInterface->SetMethodCallHandler(kSetDriverTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetDriverTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetForwardDefrostOnCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetForwardDefrostOn(data);
        });
        mInterface->SetMethodCallHandler(kSetPassengerTempCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetPassengerTemp(data);
        });
        mInterface->SetMethodCallHandler(kSetHvacPowerCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetHvacPower(data);
        });
        mInterface->SetMethodCallHandler(kSetSyncCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetSync(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
        return *this;
    }
    /// @brief Send "OfferService" message to Communication Management
    /// @uptrace{SWS_CM_00101}
    ara::core::Result<void> OfferService()
    {
        return mInterface->OfferService();
    }
    /// @brief Send "StopOfferService" message to Communication Management
    /// @uptrace{SWS_CM_00111}
    void StopOfferService()
    {
        mInterface->StopOfferService();
    }
    /// @brief Allows the implementation providing the service method to trigger the execution of the next service consumer method call at a specific point of time
    ///        if the processing mode is set to kPoll.
    /// @note This function requires that ara::com::MethodCallProcessingMode is configured as kPoll by constructor
    /// @uptrace{SWS_CM_00199}
    ara::core::Future<bool> ProcessNextMethodCall()
    {
        ara::core::Promise<bool> promise{};
        auto ret = mInterface->ProcessNextMethodCall();
        if (ret.HasValue())
        {
            promise.set_value(ret.Value());
        }
        else
        {
            promise.SetError(ret.Error());
        }
        return promise.get_future();
    }
    /// @brief In case the call to E2E_check indicated a failed E2E check of the request message, the server application can get notified via an E2E error handler.
    /// @uptrace{SWS_CM_10470}
    virtual void E2EErrorHandler(const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter)
    {
    }
    
private:
    std::unique_ptr<para::com::SkeletonInterface> mInterface;
    
public:
    /// @brief Field, zone5HvacDeviceNormal
    fields::zone5HvacDeviceNormal zone5HvacDeviceNormal;
    /// @brief Field, zone5HvacSetting
    fields::zone5HvacSetting zone5HvacSetting;
    /// @brief Field, zone5HvacStatus
    fields::zone5HvacStatus zone5HvacStatus;
    /// @brief Field, zone5HvacTemps
    fields::zone5HvacTemps zone5HvacTemps;
    /// @brief Method, SetAcOnOff
    /// @uptrace{SWS_CM_90434}
    virtual void SetAcOnOff(const std::uint8_t& on) = 0;
    /// @brief Method, SetAirSource
    /// @uptrace{SWS_CM_90434}
    virtual void SetAirSource(const std::uint8_t& src) = 0;
    /// @brief Method, SetAutoTemp
    /// @uptrace{SWS_CM_90434}
    virtual void SetAutoTemp(const std::uint8_t& on) = 0;
    /// @brief Method, SetBackwardDefrostOn
    /// @uptrace{SWS_CM_90434}
    virtual void SetBackwardDefrostOn(const std::uint8_t& on) = 0;
    /// @brief Method, SetBlowingDirection
    /// @uptrace{SWS_CM_90434}
    virtual void SetBlowingDirection(const std::uint8_t& dir) = 0;
    /// @brief Method, SetBlowingForce
    /// @uptrace{SWS_CM_90434}
    virtual void SetBlowingForce(const std::uint8_t& force) = 0;
    /// @brief Method, SetDriverTemp
    /// @uptrace{SWS_CM_90434}
    virtual void SetDriverTemp(const std::int8_t& temporature) = 0;
    /// @brief Method, SetForwardDefrostOn
    /// @uptrace{SWS_CM_90434}
    virtual void SetForwardDefrostOn(const std::uint8_t& on) = 0;
    /// @brief Method, SetPassengerTemp
    /// @uptrace{SWS_CM_90434}
    virtual void SetPassengerTemp(const std::int8_t& temporature) = 0;
    /// @brief Method, SetHvacPower
    /// @uptrace{SWS_CM_90434}
    virtual void SetHvacPower(const std::uint8_t& on) = 0;
    /// @brief Method, SetSync
    /// @uptrace{SWS_CM_90434}
    virtual void SetSync(const bool& on) = 0;
    
private:
    void HandleSetAcOnOff(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _on_;
        deserializer.read(_on_);
        SetAcOnOff(_on_);
    }
    void HandleSetAirSource(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _src_;
        deserializer.read(_src_);
        SetAirSource(_src_);
    }
    void HandleSetAutoTemp(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _on_;
        deserializer.read(_on_);
        SetAutoTemp(_on_);
    }
    void HandleSetBackwardDefrostOn(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _on_;
        deserializer.read(_on_);
        SetBackwardDefrostOn(_on_);
    }
    void HandleSetBlowingDirection(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _dir_;
        deserializer.read(_dir_);
        SetBlowingDirection(_dir_);
    }
    void HandleSetBlowingForce(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _force_;
        deserializer.read(_force_);
        SetBlowingForce(_force_);
    }
    void HandleSetDriverTemp(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::int8_t _temporature_;
        deserializer.read(_temporature_);
        SetDriverTemp(_temporature_);
    }
    void HandleSetForwardDefrostOn(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _on_;
        deserializer.read(_on_);
        SetForwardDefrostOn(_on_);
    }
    void HandleSetPassengerTemp(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::int8_t _temporature_;
        deserializer.read(_temporature_);
        SetPassengerTemp(_temporature_);
    }
    void HandleSetHvacPower(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _on_;
        deserializer.read(_on_);
        SetHvacPower(_on_);
    }
    void HandleSetSync(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _on_;
        deserializer.read(_on_);
        SetSync(_on_);
    }
    const std::string kSetAcOnOffCallSign{"SetAcOnOff"};
    const std::string kSetAirSourceCallSign{"SetAirSource"};
    const std::string kSetAutoTempCallSign{"SetAutoTemp"};
    const std::string kSetBackwardDefrostOnCallSign{"SetBackwardDefrostOn"};
    const std::string kSetBlowingDirectionCallSign{"SetBlowingDirection"};
    const std::string kSetBlowingForceCallSign{"SetBlowingForce"};
    const std::string kSetDriverTempCallSign{"SetDriverTemp"};
    const std::string kSetForwardDefrostOnCallSign{"SetForwardDefrostOn"};
    const std::string kSetPassengerTempCallSign{"SetPassengerTemp"};
    const std::string kSetHvacPowerCallSign{"SetHvacPower"};
    const std::string kSetSyncCallSign{"SetSync"};
};
} /// namespace skeleton
} /// namespace control
} /// namespace hvac
} /// namespace zone5
#endif /// PARA_COM_GEN_SERVICE_INTERFACE_ZONE5HVAC_SKELETON_H