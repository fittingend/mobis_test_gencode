///////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.
///
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, ARA::COM Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : monitoringmanagement_skeleton.h
/// SERVICE INTERFACE NAME            : MonitoringManagement
/// GENERATED DATE                    : 2025-06-17 15:27:16
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// CAUTION!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT
///
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_COM_GEN_SERVICE_INTERFACE_MONITORINGMANAGEMENT_SKELETON_H
#define PARA_COM_GEN_SERVICE_INTERFACE_MONITORINGMANAGEMENT_SKELETON_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @uptrace{SWS_CM_01004}
#include "monitoringmanagement_common.h"
#include "para/com/skeleton/skeleton_interface.h"
/// @uptrace{SWS_CM_01005}
namespace eevp
{
namespace monitoring
{
namespace service
{
/// @uptrace{SWS_CM_01006}
namespace skeleton
{
class MonitoringManagementSkeleton;
/// @uptrace{SWS_CM_01009}
namespace events
{
/// @uptrace{SWS_CM_00003}
class DistanceLevelFront
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::pdw::type::DistanceLevel;
    /// @brief Constructor
    explicit DistanceLevelFront(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~DistanceLevelFront() = default;
    /// @brief Delete copy constructor
    DistanceLevelFront(const DistanceLevelFront& other) = delete;
    /// @brief Delete copy assignment
    DistanceLevelFront& operator=(const DistanceLevelFront& other) = delete;
    /// @brief Move constructor
    DistanceLevelFront(DistanceLevelFront&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    DistanceLevelFront& operator=(DistanceLevelFront&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }

private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"DistanceLevelFront"};
};
/// @uptrace{SWS_CM_00003}
class DistanceLevelRear
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::pdw::type::DistanceLevel;
    /// @brief Constructor
    explicit DistanceLevelRear(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~DistanceLevelRear() = default;
    /// @brief Delete copy constructor
    DistanceLevelRear(const DistanceLevelRear& other) = delete;
    /// @brief Delete copy assignment
    DistanceLevelRear& operator=(const DistanceLevelRear& other) = delete;
    /// @brief Move constructor
    DistanceLevelRear(DistanceLevelRear&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    DistanceLevelRear& operator=(DistanceLevelRear&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }

private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"DistanceLevelRear"};
};
/// @uptrace{SWS_CM_00003}
class MbTempStatus
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::MbTempStatus;
    /// @brief Constructor
    explicit MbTempStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~MbTempStatus() = default;
    /// @brief Delete copy constructor
    MbTempStatus(const MbTempStatus& other) = delete;
    /// @brief Delete copy assignment
    MbTempStatus& operator=(const MbTempStatus& other) = delete;
    /// @brief Move constructor
    MbTempStatus(MbTempStatus&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    MbTempStatus& operator=(MbTempStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }

private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"MbTempStatus"};
};
/// @uptrace{SWS_CM_00003}
class eventServiceInfo
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::ControllerServiceInfo;
    /// @brief Constructor
    explicit eventServiceInfo(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventServiceInfo() = default;
    /// @brief Delete copy constructor
    eventServiceInfo(const eventServiceInfo& other) = delete;
    /// @brief Delete copy assignment
    eventServiceInfo& operator=(const eventServiceInfo& other) = delete;
    /// @brief Move constructor
    eventServiceInfo(eventServiceInfo&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventServiceInfo& operator=(eventServiceInfo&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }

private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventServiceInfo"};
};
/// @uptrace{SWS_CM_00003}
class eventUpdatableService
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::UpdatableServiceList;
    /// @brief Constructor
    explicit eventUpdatableService(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventUpdatableService() = default;
    /// @brief Delete copy constructor
    eventUpdatableService(const eventUpdatableService& other) = delete;
    /// @brief Delete copy assignment
    eventUpdatableService& operator=(const eventUpdatableService& other) = delete;
    /// @brief Move constructor
    eventUpdatableService(eventUpdatableService&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventUpdatableService& operator=(eventUpdatableService&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }

private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventUpdatableService"};
};
/// @uptrace{SWS_CM_00003}
class resetUcmCompleted
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = bool;
    /// @brief Constructor
    explicit resetUcmCompleted(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~resetUcmCompleted() = default;
    /// @brief Delete copy constructor
    resetUcmCompleted(const resetUcmCompleted& other) = delete;
    /// @brief Delete copy assignment
    resetUcmCompleted& operator=(const resetUcmCompleted& other) = delete;
    /// @brief Move constructor
    resetUcmCompleted(resetUcmCompleted&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    resetUcmCompleted& operator=(resetUcmCompleted&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }

private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"resetUcmCompleted"};
};
} /// namespace events
/// @uptrace{SWS_CM_01031}
namespace fields
{
/// @uptrace{SWS_CM_00007}
class UssStatusFront
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::pdw::type::UssStatus;
    /// @brief Constructor
    explicit UssStatusFront(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~UssStatusFront() = default;
    /// @brief Delete copy constructor
    UssStatusFront(const UssStatusFront& other) = delete;
    /// @brief Delete copy assignment
    UssStatusFront& operator=(const UssStatusFront& other) = delete;
    /// @brief Move constructor
    UssStatusFront(UssStatusFront&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    UssStatusFront& operator=(UssStatusFront&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"UssStatusFrontGetter"};
    const std::string kNotifierCallSign = {"UssStatusFrontNotifier"};
};
/// @uptrace{SWS_CM_00007}
class UssStatusRear
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::pdw::type::UssStatus;
    /// @brief Constructor
    explicit UssStatusRear(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~UssStatusRear() = default;
    /// @brief Delete copy constructor
    UssStatusRear(const UssStatusRear& other) = delete;
    /// @brief Delete copy assignment
    UssStatusRear& operator=(const UssStatusRear& other) = delete;
    /// @brief Move constructor
    UssStatusRear(UssStatusRear&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    UssStatusRear& operator=(UssStatusRear&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"UssStatusRearGetter"};
    const std::string kNotifierCallSign = {"UssStatusRearNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaDmsDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaDmsDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaDmsDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaDmsDeviceNormal(const soaDmsDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaDmsDeviceNormal& operator=(const soaDmsDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaDmsDeviceNormal(soaDmsDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaDmsDeviceNormal& operator=(soaDmsDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaDmsDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaDmsDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaDmsSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaDmsSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaDmsSwVersion() = default;
    /// @brief Delete copy constructor
    soaDmsSwVersion(const soaDmsSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaDmsSwVersion& operator=(const soaDmsSwVersion& other) = delete;
    /// @brief Move constructor
    soaDmsSwVersion(soaDmsSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaDmsSwVersion& operator=(soaDmsSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaDmsSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaDmsSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaDrvSeatDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaDrvSeatDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaDrvSeatDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaDrvSeatDeviceNormal(const soaDrvSeatDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaDrvSeatDeviceNormal& operator=(const soaDrvSeatDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaDrvSeatDeviceNormal(soaDrvSeatDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaDrvSeatDeviceNormal& operator=(soaDrvSeatDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaDrvSeatDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaDrvSeatDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaDrvSeatMotorDirection
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaSeatMotorDirection;
    /// @brief Constructor
    explicit soaDrvSeatMotorDirection(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaDrvSeatMotorDirection() = default;
    /// @brief Delete copy constructor
    soaDrvSeatMotorDirection(const soaDrvSeatMotorDirection& other) = delete;
    /// @brief Delete copy assignment
    soaDrvSeatMotorDirection& operator=(const soaDrvSeatMotorDirection& other) = delete;
    /// @brief Move constructor
    soaDrvSeatMotorDirection(soaDrvSeatMotorDirection&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaDrvSeatMotorDirection& operator=(soaDrvSeatMotorDirection&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaDrvSeatMotorDirectionGetter"};
    const std::string kNotifierCallSign = {"soaDrvSeatMotorDirectionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaDrvSeatMotorPosition
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaSeatMotorPosition;
    /// @brief Constructor
    explicit soaDrvSeatMotorPosition(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaDrvSeatMotorPosition() = default;
    /// @brief Delete copy constructor
    soaDrvSeatMotorPosition(const soaDrvSeatMotorPosition& other) = delete;
    /// @brief Delete copy assignment
    soaDrvSeatMotorPosition& operator=(const soaDrvSeatMotorPosition& other) = delete;
    /// @brief Move constructor
    soaDrvSeatMotorPosition(soaDrvSeatMotorPosition&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaDrvSeatMotorPosition& operator=(soaDrvSeatMotorPosition&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaDrvSeatMotorPositionGetter"};
    const std::string kNotifierCallSign = {"soaDrvSeatMotorPositionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaDrvSeatSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaDrvSeatSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaDrvSeatSwVersion() = default;
    /// @brief Delete copy constructor
    soaDrvSeatSwVersion(const soaDrvSeatSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaDrvSeatSwVersion& operator=(const soaDrvSeatSwVersion& other) = delete;
    /// @brief Move constructor
    soaDrvSeatSwVersion(soaDrvSeatSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaDrvSeatSwVersion& operator=(soaDrvSeatSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaDrvSeatSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaDrvSeatSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaFilmDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaFilmDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaFilmDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaFilmDeviceNormal(const soaFilmDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaFilmDeviceNormal& operator=(const soaFilmDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaFilmDeviceNormal(soaFilmDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaFilmDeviceNormal& operator=(soaFilmDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaFilmDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaFilmDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaFilmSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaFilmSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaFilmSwVersion() = default;
    /// @brief Delete copy constructor
    soaFilmSwVersion(const soaFilmSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaFilmSwVersion& operator=(const soaFilmSwVersion& other) = delete;
    /// @brief Move constructor
    soaFilmSwVersion(soaFilmSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaFilmSwVersion& operator=(soaFilmSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaFilmSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaFilmSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaHvacDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaHvacDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaHvacDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaHvacDeviceNormal(const soaHvacDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaHvacDeviceNormal& operator=(const soaHvacDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaHvacDeviceNormal(soaHvacDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaHvacDeviceNormal& operator=(soaHvacDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaHvacDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaHvacDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaHvacSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaHvacSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaHvacSwVersion() = default;
    /// @brief Delete copy constructor
    soaHvacSwVersion(const soaHvacSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaHvacSwVersion& operator=(const soaHvacSwVersion& other) = delete;
    /// @brief Move constructor
    soaHvacSwVersion(soaHvacSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaHvacSwVersion& operator=(soaHvacSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaHvacSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaHvacSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaMlmStatus
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaMlmStatus;
    /// @brief Constructor
    explicit soaMlmStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaMlmStatus() = default;
    /// @brief Delete copy constructor
    soaMlmStatus(const soaMlmStatus& other) = delete;
    /// @brief Delete copy assignment
    soaMlmStatus& operator=(const soaMlmStatus& other) = delete;
    /// @brief Move constructor
    soaMlmStatus(soaMlmStatus&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaMlmStatus& operator=(soaMlmStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaMlmStatusGetter"};
    const std::string kNotifierCallSign = {"soaMlmStatusNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaMlmSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaMlmSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaMlmSwVersion() = default;
    /// @brief Delete copy constructor
    soaMlmSwVersion(const soaMlmSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaMlmSwVersion& operator=(const soaMlmSwVersion& other) = delete;
    /// @brief Move constructor
    soaMlmSwVersion(soaMlmSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaMlmSwVersion& operator=(soaMlmSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaMlmSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaMlmSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPowerDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaPowerDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPowerDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaPowerDeviceNormal(const soaPowerDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaPowerDeviceNormal& operator=(const soaPowerDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaPowerDeviceNormal(soaPowerDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPowerDeviceNormal& operator=(soaPowerDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPowerDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaPowerDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPowerSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaPowerSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPowerSwVersion() = default;
    /// @brief Delete copy constructor
    soaPowerSwVersion(const soaPowerSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaPowerSwVersion& operator=(const soaPowerSwVersion& other) = delete;
    /// @brief Move constructor
    soaPowerSwVersion(soaPowerSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPowerSwVersion& operator=(soaPowerSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPowerSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaPowerSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaRctnStatus
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaRctnStatus;
    /// @brief Constructor
    explicit soaRctnStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaRctnStatus() = default;
    /// @brief Delete copy constructor
    soaRctnStatus(const soaRctnStatus& other) = delete;
    /// @brief Delete copy assignment
    soaRctnStatus& operator=(const soaRctnStatus& other) = delete;
    /// @brief Move constructor
    soaRctnStatus(soaRctnStatus&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaRctnStatus& operator=(soaRctnStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaRctnStatusGetter"};
    const std::string kNotifierCallSign = {"soaRctnStatusNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaRctnSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaRctnSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaRctnSwVersion() = default;
    /// @brief Delete copy constructor
    soaRctnSwVersion(const soaRctnSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaRctnSwVersion& operator=(const soaRctnSwVersion& other) = delete;
    /// @brief Move constructor
    soaRctnSwVersion(soaRctnSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaRctnSwVersion& operator=(soaRctnSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaRctnSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaRctnSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaRoaDetectState
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaRoaDetectState;
    /// @brief Constructor
    explicit soaRoaDetectState(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaRoaDetectState() = default;
    /// @brief Delete copy constructor
    soaRoaDetectState(const soaRoaDetectState& other) = delete;
    /// @brief Delete copy assignment
    soaRoaDetectState& operator=(const soaRoaDetectState& other) = delete;
    /// @brief Move constructor
    soaRoaDetectState(soaRoaDetectState&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaRoaDetectState& operator=(soaRoaDetectState&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaRoaDetectStateGetter"};
    const std::string kNotifierCallSign = {"soaRoaDetectStateNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaRoaDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaRoaDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaRoaDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaRoaDeviceNormal(const soaRoaDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaRoaDeviceNormal& operator=(const soaRoaDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaRoaDeviceNormal(soaRoaDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaRoaDeviceNormal& operator=(soaRoaDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaRoaDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaRoaDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaRoaSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaRoaSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaRoaSwVersion() = default;
    /// @brief Delete copy constructor
    soaRoaSwVersion(const soaRoaSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaRoaSwVersion& operator=(const soaRoaSwVersion& other) = delete;
    /// @brief Move constructor
    soaRoaSwVersion(soaRoaSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaRoaSwVersion& operator=(soaRoaSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaRoaSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaRoaSwVersionNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaWiperDeviceNormal
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaDeviceIsNormal;
    /// @brief Constructor
    explicit soaWiperDeviceNormal(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaWiperDeviceNormal() = default;
    /// @brief Delete copy constructor
    soaWiperDeviceNormal(const soaWiperDeviceNormal& other) = delete;
    /// @brief Delete copy assignment
    soaWiperDeviceNormal& operator=(const soaWiperDeviceNormal& other) = delete;
    /// @brief Move constructor
    soaWiperDeviceNormal(soaWiperDeviceNormal&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaWiperDeviceNormal& operator=(soaWiperDeviceNormal&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaWiperDeviceNormalGetter"};
    const std::string kNotifierCallSign = {"soaWiperDeviceNormalNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaWiperStatus
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaWiperStatus;
    /// @brief Constructor
    explicit soaWiperStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaWiperStatus() = default;
    /// @brief Delete copy constructor
    soaWiperStatus(const soaWiperStatus& other) = delete;
    /// @brief Delete copy assignment
    soaWiperStatus& operator=(const soaWiperStatus& other) = delete;
    /// @brief Move constructor
    soaWiperStatus(soaWiperStatus&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaWiperStatus& operator=(soaWiperStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaWiperStatusGetter"};
    const std::string kNotifierCallSign = {"soaWiperStatusNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaWiperSwVersion
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = std::uint8_t;
    /// @brief Constructor
    explicit soaWiperSwVersion(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaWiperSwVersion() = default;
    /// @brief Delete copy constructor
    soaWiperSwVersion(const soaWiperSwVersion& other) = delete;
    /// @brief Delete copy assignment
    soaWiperSwVersion& operator=(const soaWiperSwVersion& other) = delete;
    /// @brief Move constructor
    soaWiperSwVersion(soaWiperSwVersion&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaWiperSwVersion& operator=(soaWiperSwVersion&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }

private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaWiperSwVersionGetter"};
    const std::string kNotifierCallSign = {"soaWiperSwVersionNotifier"};
};
} /// namespace fields
/// @uptrace{SWS_CM_00002}
class MonitoringManagementSkeleton
{
public:
    /// @uptrace{SWS_CM_00191}
    struct RequestMlmSetRgbColorOutput
    {
    };
    struct RequestMoveDrvSeatHeightOutput
    {
    };
    struct RequestMoveDrvSeatReclineOutput
    {
    };
    struct RequestMoveDrvSeatSlideOutput
    {
    };
    struct RequestMoveDrvSeatTiltOutput
    {
    };
    struct RequestRearCurtainOperationOutput
    {
        eevp::control::SoaErrorState err;
    };
    struct RequestRearCurtainPositionOutput
    {
    };
    struct RequestWiperOperationOutput
    {
    };
    struct SetWiperAutoSpeedOutput
    {
    };
    struct requestAppInstallOutput
    {
        bool returnValue;
    };
    struct requestAppUpdateOutput
    {
        bool returnValue;
    };
    struct requestControllerServiceInfoOutput
    {
        eevp::monitoring::type::ControllerServiceInfo controllerServiceInfo;
        bool returnValue;
    };
    struct resetUcmTestOutput
    {
    };
    /// @brief Constructor
    /// @uptrace{SWS_CM_00002, SWS_CM_00152}
    MonitoringManagementSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        : mInterface(std::make_unique<para::com::SkeletonInterface>(instanceSpec, mode))
        , DistanceLevelFront(mInterface.get())
        , DistanceLevelRear(mInterface.get())
        , MbTempStatus(mInterface.get())
        , eventServiceInfo(mInterface.get())
        , eventUpdatableService(mInterface.get())
        , resetUcmCompleted(mInterface.get())
        , UssStatusFront(mInterface.get())
        , UssStatusRear(mInterface.get())
        , soaDmsDeviceNormal(mInterface.get())
        , soaDmsSwVersion(mInterface.get())
        , soaDrvSeatDeviceNormal(mInterface.get())
        , soaDrvSeatMotorDirection(mInterface.get())
        , soaDrvSeatMotorPosition(mInterface.get())
        , soaDrvSeatSwVersion(mInterface.get())
        , soaFilmDeviceNormal(mInterface.get())
        , soaFilmSwVersion(mInterface.get())
        , soaHvacDeviceNormal(mInterface.get())
        , soaHvacSwVersion(mInterface.get())
        , soaMlmStatus(mInterface.get())
        , soaMlmSwVersion(mInterface.get())
        , soaPowerDeviceNormal(mInterface.get())
        , soaPowerSwVersion(mInterface.get())
        , soaRctnStatus(mInterface.get())
        , soaRctnSwVersion(mInterface.get())
        , soaRoaDetectState(mInterface.get())
        , soaRoaDeviceNormal(mInterface.get())
        , soaRoaSwVersion(mInterface.get())
        , soaWiperDeviceNormal(mInterface.get())
        , soaWiperStatus(mInterface.get())
        , soaWiperSwVersion(mInterface.get())
    {
        mInterface->SetMethodCallHandler(kRequestMlmSetRgbColorCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMlmSetRgbColor(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatHeightCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatHeight(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatReclineCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatRecline(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatSlideCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatSlide(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatTiltCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatTilt(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestRearCurtainOperationCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestRearCurtainOperation(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestRearCurtainPositionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestRearCurtainPosition(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestWiperOperationCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestWiperOperation(data, token);
        });
        mInterface->SetMethodCallHandler(kSetWiperAutoSpeedCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleSetWiperAutoSpeed(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppInstallCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppInstall(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppUpdateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppUpdate(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kresetUcmTestCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleresetUcmTest(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
    }
    /// @brief Destructor
    virtual ~MonitoringManagementSkeleton() = default;
    /// @brief Delete copy constructor
    /// @uptrace{SWS_CM_00134}
    MonitoringManagementSkeleton(const MonitoringManagementSkeleton& other) = delete;
    /// @brief Delete copy assignment
    /// @uptrace{SWS_CM_00134}
    MonitoringManagementSkeleton& operator=(const MonitoringManagementSkeleton& other) = delete;
    /// @brief Move constructor
    /// @uptrace{SWS_CM_00135}
    MonitoringManagementSkeleton(MonitoringManagementSkeleton&& other) noexcept
        : mInterface(std::move(other.mInterface))
        , DistanceLevelFront(std::move(other.DistanceLevelFront))
        , DistanceLevelRear(std::move(other.DistanceLevelRear))
        , MbTempStatus(std::move(other.MbTempStatus))
        , eventServiceInfo(std::move(other.eventServiceInfo))
        , eventUpdatableService(std::move(other.eventUpdatableService))
        , resetUcmCompleted(std::move(other.resetUcmCompleted))
        , UssStatusFront(std::move(other.UssStatusFront))
        , UssStatusRear(std::move(other.UssStatusRear))
        , soaDmsDeviceNormal(std::move(other.soaDmsDeviceNormal))
        , soaDmsSwVersion(std::move(other.soaDmsSwVersion))
        , soaDrvSeatDeviceNormal(std::move(other.soaDrvSeatDeviceNormal))
        , soaDrvSeatMotorDirection(std::move(other.soaDrvSeatMotorDirection))
        , soaDrvSeatMotorPosition(std::move(other.soaDrvSeatMotorPosition))
        , soaDrvSeatSwVersion(std::move(other.soaDrvSeatSwVersion))
        , soaFilmDeviceNormal(std::move(other.soaFilmDeviceNormal))
        , soaFilmSwVersion(std::move(other.soaFilmSwVersion))
        , soaHvacDeviceNormal(std::move(other.soaHvacDeviceNormal))
        , soaHvacSwVersion(std::move(other.soaHvacSwVersion))
        , soaMlmStatus(std::move(other.soaMlmStatus))
        , soaMlmSwVersion(std::move(other.soaMlmSwVersion))
        , soaPowerDeviceNormal(std::move(other.soaPowerDeviceNormal))
        , soaPowerSwVersion(std::move(other.soaPowerSwVersion))
        , soaRctnStatus(std::move(other.soaRctnStatus))
        , soaRctnSwVersion(std::move(other.soaRctnSwVersion))
        , soaRoaDetectState(std::move(other.soaRoaDetectState))
        , soaRoaDeviceNormal(std::move(other.soaRoaDeviceNormal))
        , soaRoaSwVersion(std::move(other.soaRoaSwVersion))
        , soaWiperDeviceNormal(std::move(other.soaWiperDeviceNormal))
        , soaWiperStatus(std::move(other.soaWiperStatus))
        , soaWiperSwVersion(std::move(other.soaWiperSwVersion))
    {
        mInterface->SetMethodCallHandler(kRequestMlmSetRgbColorCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMlmSetRgbColor(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatHeightCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatHeight(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatReclineCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatRecline(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatSlideCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatSlide(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatTiltCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatTilt(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestRearCurtainOperationCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestRearCurtainOperation(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestRearCurtainPositionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestRearCurtainPosition(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestWiperOperationCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestWiperOperation(data, token);
        });
        mInterface->SetMethodCallHandler(kSetWiperAutoSpeedCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleSetWiperAutoSpeed(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppInstallCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppInstall(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppUpdateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppUpdate(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kresetUcmTestCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleresetUcmTest(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
    }
    /// @brief Move assignment
    /// @uptrace{SWS_CM_00135}
    MonitoringManagementSkeleton& operator=(MonitoringManagementSkeleton&& other) noexcept
    {
        mInterface = std::move(other.mInterface);
        DistanceLevelFront = std::move(other.DistanceLevelFront);
        DistanceLevelRear = std::move(other.DistanceLevelRear);
        MbTempStatus = std::move(other.MbTempStatus);
        eventServiceInfo = std::move(other.eventServiceInfo);
        eventUpdatableService = std::move(other.eventUpdatableService);
        resetUcmCompleted = std::move(other.resetUcmCompleted);
        UssStatusFront = std::move(other.UssStatusFront);
        UssStatusRear = std::move(other.UssStatusRear);
        soaDmsDeviceNormal = std::move(other.soaDmsDeviceNormal);
        soaDmsSwVersion = std::move(other.soaDmsSwVersion);
        soaDrvSeatDeviceNormal = std::move(other.soaDrvSeatDeviceNormal);
        soaDrvSeatMotorDirection = std::move(other.soaDrvSeatMotorDirection);
        soaDrvSeatMotorPosition = std::move(other.soaDrvSeatMotorPosition);
        soaDrvSeatSwVersion = std::move(other.soaDrvSeatSwVersion);
        soaFilmDeviceNormal = std::move(other.soaFilmDeviceNormal);
        soaFilmSwVersion = std::move(other.soaFilmSwVersion);
        soaHvacDeviceNormal = std::move(other.soaHvacDeviceNormal);
        soaHvacSwVersion = std::move(other.soaHvacSwVersion);
        soaMlmStatus = std::move(other.soaMlmStatus);
        soaMlmSwVersion = std::move(other.soaMlmSwVersion);
        soaPowerDeviceNormal = std::move(other.soaPowerDeviceNormal);
        soaPowerSwVersion = std::move(other.soaPowerSwVersion);
        soaRctnStatus = std::move(other.soaRctnStatus);
        soaRctnSwVersion = std::move(other.soaRctnSwVersion);
        soaRoaDetectState = std::move(other.soaRoaDetectState);
        soaRoaDeviceNormal = std::move(other.soaRoaDeviceNormal);
        soaRoaSwVersion = std::move(other.soaRoaSwVersion);
        soaWiperDeviceNormal = std::move(other.soaWiperDeviceNormal);
        soaWiperStatus = std::move(other.soaWiperStatus);
        soaWiperSwVersion = std::move(other.soaWiperSwVersion);
        mInterface->SetMethodCallHandler(kRequestMlmSetRgbColorCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMlmSetRgbColor(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatHeightCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatHeight(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatReclineCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatRecline(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatSlideCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatSlide(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestMoveDrvSeatTiltCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestMoveDrvSeatTilt(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestRearCurtainOperationCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestRearCurtainOperation(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestRearCurtainPositionCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestRearCurtainPosition(data, token);
        });
        mInterface->SetMethodCallHandler(kRequestWiperOperationCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleRequestWiperOperation(data, token);
        });
        mInterface->SetMethodCallHandler(kSetWiperAutoSpeedCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleSetWiperAutoSpeed(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppInstallCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppInstall(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppUpdateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppUpdate(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfo(data, token);
        });
        mInterface->SetMethodCallHandler(kresetUcmTestCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleresetUcmTest(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
        return *this;
    }
    /// @brief Send "OfferService" message to Communication Management
    /// @uptrace{SWS_CM_00101}
    ara::core::Result<void> OfferService()
    {
        return mInterface->OfferService();
    }
    /// @brief Send "StopOfferService" message to Communication Management
    /// @uptrace{SWS_CM_00111}
    void StopOfferService()
    {
        mInterface->StopOfferService();
    }
    /// @brief Allows the implementation providing the service method to trigger the execution of the next service consumer method call at a specific point of time
    ///        if the processing mode is set to kPoll.
    /// @note This function requires that ara::com::MethodCallProcessingMode is configured as kPoll by constructor
    /// @uptrace{SWS_CM_00199}
    ara::core::Future<bool> ProcessNextMethodCall()
    {
        ara::core::Promise<bool> promise{};
        auto ret = mInterface->ProcessNextMethodCall();
        if (ret.HasValue())
        {
            promise.set_value(ret.Value());
        }
        else
        {
            promise.SetError(ret.Error());
        }
        return promise.get_future();
    }
    /// @brief In case the call to E2E_check indicated a failed E2E check of the request message, the server application can get notified via an E2E error handler.
    /// @uptrace{SWS_CM_10470}
    virtual void E2EErrorHandler(const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter)
    {
    }

private:
    std::unique_ptr<para::com::SkeletonInterface> mInterface;

public:
    /// @brief Event, DistanceLevelFront
    events::DistanceLevelFront DistanceLevelFront;
    /// @brief Event, DistanceLevelRear
    events::DistanceLevelRear DistanceLevelRear;
    /// @brief Event, MbTempStatus
    events::MbTempStatus MbTempStatus;
    /// @brief Event, eventServiceInfo
    events::eventServiceInfo eventServiceInfo;
    /// @brief Event, eventUpdatableService
    events::eventUpdatableService eventUpdatableService;
    /// @brief Event, resetUcmCompleted
    events::resetUcmCompleted resetUcmCompleted;
    /// @brief Field, UssStatusFront
    fields::UssStatusFront UssStatusFront;
    /// @brief Field, UssStatusRear
    fields::UssStatusRear UssStatusRear;
    /// @brief Field, soaDmsDeviceNormal
    fields::soaDmsDeviceNormal soaDmsDeviceNormal;
    /// @brief Field, soaDmsSwVersion
    fields::soaDmsSwVersion soaDmsSwVersion;
    /// @brief Field, soaDrvSeatDeviceNormal
    fields::soaDrvSeatDeviceNormal soaDrvSeatDeviceNormal;
    /// @brief Field, soaDrvSeatMotorDirection
    fields::soaDrvSeatMotorDirection soaDrvSeatMotorDirection;
    /// @brief Field, soaDrvSeatMotorPosition
    fields::soaDrvSeatMotorPosition soaDrvSeatMotorPosition;
    /// @brief Field, soaDrvSeatSwVersion
    fields::soaDrvSeatSwVersion soaDrvSeatSwVersion;
    /// @brief Field, soaFilmDeviceNormal
    fields::soaFilmDeviceNormal soaFilmDeviceNormal;
    /// @brief Field, soaFilmSwVersion
    fields::soaFilmSwVersion soaFilmSwVersion;
    /// @brief Field, soaHvacDeviceNormal
    fields::soaHvacDeviceNormal soaHvacDeviceNormal;
    /// @brief Field, soaHvacSwVersion
    fields::soaHvacSwVersion soaHvacSwVersion;
    /// @brief Field, soaMlmStatus
    fields::soaMlmStatus soaMlmStatus;
    /// @brief Field, soaMlmSwVersion
    fields::soaMlmSwVersion soaMlmSwVersion;
    /// @brief Field, soaPowerDeviceNormal
    fields::soaPowerDeviceNormal soaPowerDeviceNormal;
    /// @brief Field, soaPowerSwVersion
    fields::soaPowerSwVersion soaPowerSwVersion;
    /// @brief Field, soaRctnStatus
    fields::soaRctnStatus soaRctnStatus;
    /// @brief Field, soaRctnSwVersion
    fields::soaRctnSwVersion soaRctnSwVersion;
    /// @brief Field, soaRoaDetectState
    fields::soaRoaDetectState soaRoaDetectState;
    /// @brief Field, soaRoaDeviceNormal
    fields::soaRoaDeviceNormal soaRoaDeviceNormal;
    /// @brief Field, soaRoaSwVersion
    fields::soaRoaSwVersion soaRoaSwVersion;
    /// @brief Field, soaWiperDeviceNormal
    fields::soaWiperDeviceNormal soaWiperDeviceNormal;
    /// @brief Field, soaWiperStatus
    fields::soaWiperStatus soaWiperStatus;
    /// @brief Field, soaWiperSwVersion
    fields::soaWiperSwVersion soaWiperSwVersion;
    /// @brief Method, RequestMlmSetRgbColor
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestMlmSetRgbColorOutput> RequestMlmSetRgbColor(const std::uint8_t& colorTableIndex) = 0;
    /// @brief Method, RequestMoveDrvSeatHeight
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestMoveDrvSeatHeightOutput> RequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir) = 0;
    /// @brief Method, RequestMoveDrvSeatRecline
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestMoveDrvSeatReclineOutput> RequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir) = 0;
    /// @brief Method, RequestMoveDrvSeatSlide
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestMoveDrvSeatSlideOutput> RequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir) = 0;
    /// @brief Method, RequestMoveDrvSeatTilt
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestMoveDrvSeatTiltOutput> RequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir) = 0;
    /// @brief Method, RequestRearCurtainOperation
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestRearCurtainOperationOutput> RequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir) = 0;
    /// @brief Method, RequestRearCurtainPosition
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestRearCurtainPositionOutput> RequestRearCurtainPosition(const std::uint8_t& posPercentage) = 0;
    /// @brief Method, RequestWiperOperation
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<RequestWiperOperationOutput> RequestWiperOperation(const eevp::control::SoaWiperMode& mode) = 0;
    /// @brief Method, SetWiperAutoSpeed
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<SetWiperAutoSpeedOutput> SetWiperAutoSpeed(const bool& isAutoSpeed) = 0;
    /// @brief Method, requestAppInstall
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestAppInstallOutput> requestAppInstall(const eevp::type::String& controllerServiceName) = 0;
    /// @brief Method, requestAppUpdate
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestAppUpdateOutput> requestAppUpdate(const eevp::type::String& controllerServiceName) = 0;
    /// @brief Method, requestControllerServiceInfo
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestControllerServiceInfoOutput> requestControllerServiceInfo(const eevp::type::String& controllerServiceName) = 0;
    /// @brief Method, resetUcmTest
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<resetUcmTestOutput> resetUcmTest() = 0;

private:
    void HandleRequestMlmSetRgbColor(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _colorTableIndex_;
        deserializer.read(_colorTableIndex_);
        auto future = RequestMlmSetRgbColor(_colorTableIndex_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestMlmSetRgbColorCallSign, retResult, retData, token);
    }
    void HandleRequestMoveDrvSeatHeight(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaSeatHeightDirection _dir_;
        deserializer.read(_dir_);
        auto future = RequestMoveDrvSeatHeight(_dir_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestMoveDrvSeatHeightCallSign, retResult, retData, token);
    }
    void HandleRequestMoveDrvSeatRecline(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaSeatReclineDirection _dir_;
        deserializer.read(_dir_);
        auto future = RequestMoveDrvSeatRecline(_dir_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestMoveDrvSeatReclineCallSign, retResult, retData, token);
    }
    void HandleRequestMoveDrvSeatSlide(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaSeatSlideDirection _dir_;
        deserializer.read(_dir_);
        auto future = RequestMoveDrvSeatSlide(_dir_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestMoveDrvSeatSlideCallSign, retResult, retData, token);
    }
    void HandleRequestMoveDrvSeatTilt(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaSeatTiltDirection _dir_;
        deserializer.read(_dir_);
        auto future = RequestMoveDrvSeatTilt(_dir_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestMoveDrvSeatTiltCallSign, retResult, retData, token);
    }
    void HandleRequestRearCurtainOperation(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaRctnMotorDir _motorDir_;
        deserializer.read(_motorDir_);
        auto future = RequestRearCurtainOperation(_motorDir_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            RequestRearCurtainOperationOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.err);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestRearCurtainOperationCallSign, retResult, retData, token);
    }
    void HandleRequestRearCurtainPosition(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _posPercentage_;
        deserializer.read(_posPercentage_);
        auto future = RequestRearCurtainPosition(_posPercentage_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestRearCurtainPositionCallSign, retResult, retData, token);
    }
    void HandleRequestWiperOperation(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::control::SoaWiperMode _mode_;
        deserializer.read(_mode_);
        auto future = RequestWiperOperation(_mode_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kRequestWiperOperationCallSign, retResult, retData, token);
    }
    void HandleSetWiperAutoSpeed(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _isAutoSpeed_;
        deserializer.read(_isAutoSpeed_);
        auto future = SetWiperAutoSpeed(_isAutoSpeed_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kSetWiperAutoSpeedCallSign, retResult, retData, token);
    }
    void HandlerequestAppInstall(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        deserializer.read(_controllerServiceName_);
        auto future = requestAppInstall(_controllerServiceName_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestAppInstallOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestAppInstallCallSign, retResult, retData, token);
    }
    void HandlerequestAppUpdate(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        deserializer.read(_controllerServiceName_);
        auto future = requestAppUpdate(_controllerServiceName_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestAppUpdateOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestAppUpdateCallSign, retResult, retData, token);
    }
    void HandlerequestControllerServiceInfo(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        deserializer.read(_controllerServiceName_);
        auto future = requestControllerServiceInfo(_controllerServiceName_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestControllerServiceInfoOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.controllerServiceInfo);
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestControllerServiceInfoCallSign, retResult, retData, token);
    }
    void HandleresetUcmTest(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = resetUcmTest();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kresetUcmTestCallSign, retResult, retData, token);
    }
    const std::string kRequestMlmSetRgbColorCallSign{"RequestMlmSetRgbColor"};
    const std::string kRequestMoveDrvSeatHeightCallSign{"RequestMoveDrvSeatHeight"};
    const std::string kRequestMoveDrvSeatReclineCallSign{"RequestMoveDrvSeatRecline"};
    const std::string kRequestMoveDrvSeatSlideCallSign{"RequestMoveDrvSeatSlide"};
    const std::string kRequestMoveDrvSeatTiltCallSign{"RequestMoveDrvSeatTilt"};
    const std::string kRequestRearCurtainOperationCallSign{"RequestRearCurtainOperation"};
    const std::string kRequestRearCurtainPositionCallSign{"RequestRearCurtainPosition"};
    const std::string kRequestWiperOperationCallSign{"RequestWiperOperation"};
    const std::string kSetWiperAutoSpeedCallSign{"SetWiperAutoSpeed"};
    const std::string krequestAppInstallCallSign{"requestAppInstall"};
    const std::string krequestAppUpdateCallSign{"requestAppUpdate"};
    const std::string krequestControllerServiceInfoCallSign{"requestControllerServiceInfo"};
    const std::string kresetUcmTestCallSign{"resetUcmTest"};
};
} /// namespace skeleton
} /// namespace service
} /// namespace monitoring
} /// namespace eevp
#endif /// PARA_COM_GEN_SERVICE_INTERFACE_MONITORINGMANAGEMENT_SKELETON_H